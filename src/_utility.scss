
/**
 * These classes have `!important` flag used proactively to force immutability,
 * meaning these classes will always trump any component-based styles.
 * Use them only when sure that property need to stay the
 * same under all circumstances (diffrent viewports, hover states...).
 */

/*========================================*\
    $ACESSIBILITY
\*========================================*/

// Hide only visually, but have it available for screenreaders: h5bp.com/v
.u-visuallyhidden {
  position: absolute;
  overflow: hidden;
  clip: rect(0 0 0 0);
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  border: 0;
}

// Extends the .u-visuallyhidden class to allow the element to be focusable
.u-visuallyhidden.is-focusable:active,
.u-visuallyhidden.is-focusable:focus {
  position: static;
  overflow: visible;
  clip: auto;
  margin: 0;
  width: auto;
  height: auto;
}

.u-hidden { display: none !important; }

/*========================================*\
    $TYPE
\*========================================*/

.u-fw--light  { font-weight: 300 !important; }
.u-fw--normal { font-weight: 400 !important; }
.u-fw--medium { font-weight: 600 !important; }
.u-fw--bold   { font-weight: 700 !important; }

.u-txt--left    { text-align: left !important; }
.u-txt--right   { text-align: right !important; }
.u-txt--center  { text-align: center !important; }

.u-txt--lowercase   { text-transform: lowercase !important; }
.u-txt--uppercase   { text-transform: uppercase !important; }
.u-txt--capitalize  { text-transform: capitalize !important; }

.u-txt--strike       { text-decoration: line-through !important; }
.u-txt--underline    { text-decoration: underline !important; }
.u-txt--no-underline { text-decoration: none !important; }

/*========================================*\
    $COLOR
\*========================================*/

.u-color--current { color: currentColor !important; }

/*========================================*\
    $POSITION
\*========================================*/

// we don't use utility classes for absolute and fixed position since
// they usually require additional properties (top, left...)
.u-relative { position: relative !important; }
.u-static   { position: static !important; }

.u-block        { display: block !important; }
.u-inline-block { display: inline-block !important; }
.u-inline       { display: inline !important; }

.u-center { margin: 0 auto !important; }

.u-float--left  { float: left !important; }
.u-float--right { float: right !important; }

.u-clearfix { @include clearfix; }

/*========================================*\
    $SPACING
\*========================================*/

/**
 *
 * Utility spacing classes for setting margin and padding
 *
 * Classes are generated using Sass maps and loop functions.
 * Use `$spacing-map` to add or remove spacing values.
 * See output here: https://www.sassmeister.com/gist/3f536e407ec9e480a1f64349aba5497c
 *
 */

// Maps for values and properties

$spacing-map: (

  "0":      0,
  "0-25":   $spacing-0-25,
  "0-5":    $spacing-0-5
  "1":      $spacing-1,
  "2":      $spacing-2

) !default;

$helpers: (

  "m":    "margin",
  "mt":   "margin-top",
  "mr":   "margin-right",
  "mb":   "margin-bottom",
  "ml":   "margin-left",
  "mh":   "margin-right" "margin-left",
  "mv":   "margin-top" "margin-bottom",

  "p":    "padding",
  "pt":   "padding-top",
  "pr":   "padding-right",
  "pb":   "padding-bottom",
  "pl":   "padding-left",
  "ph":   "padding-right" "padding-left",
  "pv":   "padding-top" "padding-bottom"

) !default;


// Loop over the helpers in $helpers
@each $alias, $property in $helpers {

  // Loop over spacing values in $spacing-map
  @each $key, $value in $spacing-map {

    // Create a new class
    .#{$alias}--#{$key} {

      // If helper contains several properties, loop over them
      @if length($property) > 1 {
        @each $prop in $property {
          #{$prop}: $value !important;
        }
      }

      // If helper is a single property, output it
      @else {
        #{$property}: $value !important;
      }
    }
  }
}
